@page "/components/table"
<PageHeader Title="Table 表格">
    表格常用于展示同类结构下的多种数据，易于组织、对比和分析等，并可对数据进行搜索、筛选、排序等操作。一般包括表头、数据行和表尾三部分。
</PageHeader>

<h2>表格分类</h2>
<p>随着表格功能越来越多，如果把所有的功能都集中在一个组件里面，代码文件会越来越臃肿。既不利于维护，也不利于按需引入必要功能的业务。</p>
<p>
    因此，表格组件有三个：BaseTable（基础表格）、PrimaryTable（主表格）、EnhancedTable（增强型表格）。
</p>

<Example Title="基础表格">
    <Description>简单表格，使用分页切换数据。使用边框线、斑马纹等清晰呈现各数据单元格边界线，辅助信息区隔。</Description>
    <RunContent>
        <Table TItem="User" Data="UserList">
            <FieldColumn Value="context?.Id" Title="Id" />
            <FieldColumn Value="context?.Name" Title="姓名" />
            <FieldColumn Value="context?.Age" Title="年龄" />
            <FieldColumn Title="性别">
                @if (context is not null)
                {
                    if (context.Gender)
                    {
                        <Tag Theme="Theme.Primary">男</Tag>
                    }
                    else
                    {
                        <Tag Theme="Theme.Danger">女</Tag>
                    }
                }
                </FieldColumn>
        </Table>
    </RunContent>
    <CodeContent>
        @Code.Create(@"
```html
```
")
    </CodeContent>
</Example>
@code{
    List<User> UserList => new(){
        new User{ Id=1, Name="张三",Age=35,Gender=true},
        new User{ Id=2, Name="李四",Age=22,Gender=false},
        new User{ Id=3, Name="王五",Age=35,Gender=true},
        new User{ Id=4, Name="赵六",Age=18,Gender=false},
        new User{ Id=5, Name="韩七",Age=65,Gender=true},
    };

    class User{
        public int Id{ get; set; }
        public string? Name{ get; set; }
        public int? Age{ get; set; }
        public bool Gender{ get; set; }
    }
}