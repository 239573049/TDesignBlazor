@page "/components/progress"

<PageHeader Title="Progress 进度条">定义：展示操作的当前进度。</PageHeader>

<Example Title="线形进度条">
    <Description>以线形表示进度的组件，可以选择性地配有文字或图标补充显示进度和状态。多用于信息量较为丰富的情况。</Description>
    <RunContent>
        <Space Vertical>
            <SpaceItem>
                <div class="t-progress-domo-margin">默认样式</div>
                <TProgress Theme="ProgressTheme.line" Percentage="30"></TProgress>
            </SpaceItem>
            <SpaceItem>
                <div class="t-progress-domo-margin">100%</div>
                <TProgress Theme="ProgressTheme.line"  Percentage="100"></TProgress>
            </SpaceItem>
            <SpaceItem>
                 <div class="t-progress-domo-margin">进度完成</div>
                <TProgress Theme="ProgressTheme.line" Status="Status.Success" Percentage="60"></TProgress>
            </SpaceItem>
            <SpaceItem>
                 <div class="t-progress-domo-margin">进度状态发生重大错误</div>
                <TProgress Theme="ProgressTheme.line" Status="Status.Error" Percentage="60"></TProgress>
            </SpaceItem>
                <SpaceItem>
                   <div class="t-progress-domo-margin">进度被中断</div>
                <TProgress Theme="ProgressTheme.line" Status="Status.Warning" Percentage="60"></TProgress>
            </SpaceItem>
                 <SpaceItem>
                      <div class="t-progress-domo-margin">渐变色</div>
                @{
                    LinearGradient linearGradient = new LinearGradient() { From = "#0052D9", To = "#00A870" };
                }
                <TProgress Theme="ProgressTheme.line" Color="@linearGradient" Percentage="60"></TProgress>
            </SpaceItem>
            <SpaceItem>
                <h3>可以在线形内展示进度信息</h3>
                <div class="t-progress-domo-margin">默认样式</div>
                <TProgress Theme="ProgressTheme.plump" Percentage="30" />
            </SpaceItem>
            <SpaceItem>
                <div class="t-progress-domo-margin">进度0-10%时数字位置出现在目前进度的右边区域</div>
                <TProgress Theme="ProgressTheme.plump" Percentage="5" />
            </SpaceItem>


        </Space>
    </RunContent>
    <CodeContent>
        @Code.Create(@"
```html
<Space Vertical>
    <SpaceItem>
        <Tag>默认</Tag>
        <Tag><Link Theme=""Theme.Primary"">超链接</Link></Tag>
    </SpaceItem>
    <SpaceItem>
        <Tag Theme=""Theme.Primary"">标签1</Tag>
        <Tag Theme=""Theme.Success"">标签2</Tag>
        <Tag Theme=""Theme.Warning"">标签3</Tag>
        <Tag Theme=""Theme.Danger"">标签4</Tag>
    </SpaceItem>
    <SpaceItem>
        <Tag Theme=""Theme.Primary"" Type=""TagType.Light"">标签1</Tag>
        <Tag Theme=""Theme.Success"" Type=""TagType.Light"">标签2</Tag>
        <Tag Theme=""Theme.Warning"" Type=""TagType.Light"">标签3</Tag>
        <Tag Theme=""Theme.Danger"" Type=""TagType.Light"">标签4</Tag>
    </SpaceItem>
    <SpaceItem>
        <Tag Theme=""Theme.Primary"" Type=""TagType.Outline"">标签1</Tag>
        <Tag Theme=""Theme.Success"" Type=""TagType.Outline"">标签2</Tag>
        <Tag Theme=""Theme.Warning"" Type=""TagType.Outline"">标签3</Tag>
        <Tag Theme=""Theme.Danger"" Type=""TagType.Outline"">标签4</Tag>
    </SpaceItem>
</Space>
```
")
    </CodeContent>
</Example>
<Example Title="带图标的标签">
    <Description>设置 <code>Icon</code> 图标名称会在前面加图标。</Description>
    <RunContent>
        <Tag Icon="IconName.Discount">默认标签</Tag>
    </RunContent>
    <CodeContent>
        @Code.Create(@"
```html
<Tag Icon=""IconName.Discount"">默认标签</Tag>
```
")
    </CodeContent>
</Example>

<Example Title="带关闭的标签">
    <Description>@Code.Create("设置 `Closable` 会自动添加可删除的图标，并且 `OnClosing` 事件会触发。")</Description>
    <RunContent>
        <Tag Closable>默认标签</Tag>

        <Tag Closable OnClosing="@(closed=>JS.InvokeVoidAsync("alert",$"关闭：{closed}"))">点击关闭</Tag>
    </RunContent>
    <CodeContent>
        @Code.Create(@"
```html
<Tag Closable>默认标签</Tag>

<Tag Closable OnClosing=""@(closed=>JS.InvokeVoidAsync(""alert"",$""关闭：{closed}""))"">点击关闭</Tag>
```
")
    </CodeContent>
</Example>

<Example Title="可选择的标签">
    <Description>@Code.Create("设置 `Checkbox` 将开启复选框模式，支持双向绑定。")</Description>
    <RunContent>
        <Tag Checkbox @bind-Checked="Checked1">
            <ChildContent>未选择</ChildContent>
            <CheckedContent>已选择</CheckedContent>
        </Tag>
    </RunContent>
    <CodeContent>
        @Code.Create(@"
```html
<Tag Checkbox @bind-Checked=""Checked1"">
    <ChildContent>未选择</ChildContent>
    <CheckedContent>已选择</CheckedContent>
</Tag>
```
")
    </CodeContent>
</Example>
<Example Title="超长省略文本标签">
    <Description>@Code.Create("设置 `Width` 固定宽度，超出部分自动省略")</Description>
    <RunContent>
        <Tag Width="120" title="默认超过八个字符就省略显示">默认超过八个字符就省略显示</Tag>
    </RunContent>
    <CodeContent>
        @Code.Create(@"
```html
<Tag Width=""120"" title=""默认超过八个字符就省略显示"">默认超过八个字符就省略显示</Tag>
```
")
    </CodeContent>
</Example>
<Example Title="不同尺寸的标签">
    <Description>提供大、中（默认）、小三种尺寸。</Description>
    <RunContent>
        <Tag Size="Size.Small">小标签</Tag>
        <Tag>中标签</Tag>
        <Tag Size="Size.Large">大标签</Tag>
    </RunContent>
    <CodeContent>
        @Code.Create(@"
```html
<Tag Size=""Size.Small"">小标签</Tag>
<Tag>中标签</Tag>
<Tag Size=""Size.Large"">大标签</Tag>
```
")
    </CodeContent>
</Example>
<Example Title="不同形状的标签">
    <Description>提供方形、圆角方形、标记型三种形状。</Description>
    <RunContent>
        <Tag>方形</Tag><Tag Theme="Theme.Primary" Type="TagType.Dark">方形</Tag>
        <br />
        <br />
        <Tag Shape="TagShape.Round">椭圆</Tag><Tag Theme="Theme.Primary" Shape="TagShape.Round">椭圆</Tag>
        <br />
        <br />
        <Tag Shape="TagShape.Mark">半椭圆</Tag><Tag Theme="Theme.Primary" Shape="TagShape.Mark">半椭圆</Tag>
    </RunContent>
    <CodeContent>
        @Code.Create(@"
```html
<Tag>方形</Tag>
<Tag Theme=""Theme.Primary"">方形</Tag>

<Tag Shape=""TagShape.Round"">椭圆</Tag>
<Tag Theme=""Theme.Primary"" Shape=""TagShape.Round"">椭圆</Tag>

<Tag Shape=""TagShape.Mark"">半椭圆</Tag>
<Tag Theme=""Theme.Primary"" Shape=""TagShape.Mark"">半椭圆</Tag>
```
")
    </CodeContent>
</Example>
@inject IJSRuntime JS
@code {
    bool Checked1;
}

